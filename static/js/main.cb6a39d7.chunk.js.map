{"version":3,"sources":["Header.js","BoardCard.js","services/BoardService.js","PublicBoards.js","AddBoard.js","services/CookieService.js","services/AccountService.js","Login.js","App.js","index.js"],"names":["useStyles","makeStyles","appbarstyle","backgroundColor","typographyStyle","flex","Header","userName","avatar","updateUserProfileAction","classes","AppBar","position","className","Toolbar","Typography","variant","Avatar","src","Button","onClick","root","minWidth","title","color","pos","marginBottom","modifiedDate","fontSize","icon","fontWeight","BoardCard","name","cardCount","deleteAction","Card","CardContent","align","moment","format","IconButton","aria-label","userID","a","axios","get","res","status","data","console","log","boardID","delete","funcs","getBoards","deleteBoard","PublicBoards","boardList","refreshBoards","boards","Array","from","listView","length","i","push","Grid","item","sx","BoardService","_id","container","spacing","AddBoard","Box","borderRadius","size","cookies","Cookies","func","write","key","value","set","read","clear","remove","email","password","firstName","lastName","post","put","login","register","getUser","update","theme","flexGrow","padding","Login","loginSuccessAction","useState","setEmail","setPassword","haveAnAccount","setHaveAnAccount","setFirstName","setLastName","event","preventDefault","AccountService","CookieService","direction","justify","alignItems","onSubmit","e","FormControl","width","InputLabel","htmlFor","Input","id","type","fullWidth","onInput","String","target","Link","titleStyles","marginBlockStart","App","setBoards","user","setUser","isLoading","setIsLoading","FetchData","then","userData","useEffect","m","display","ml","xs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb6a39d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Avatar, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    appbarstyle: { backgroundColor: '#2196F3' },\r\n    typographyStyle: { flex: 1 }\r\n}));\r\n\r\n\r\nconst Header = ({ userName, avatar, updateUserProfileAction }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"static\" className={classes.appbarstyle}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\" className={classes.typographyStyle}>Sprint Retrospective</Typography>\r\n                <Avatar src={avatar} />\r\n                <Button onClick={() => { updateUserProfileAction() }}>\r\n                    Hi {userName}\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles, Card, CardContent, Typography, IconButton } from '@material-ui/core';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 200,\r\n    },\r\n    title: {\r\n        color: '#8E24AA'\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    modifiedDate: {\r\n        fontSize: 15\r\n    },\r\n    icon: {\r\n        fontSize: 15,\r\n        color: '#283593',\r\n        fontWeight: 'bolder'\r\n    }\r\n});\r\n\r\n\r\nconst BoardCard = ({ name, cardCount, modifiedDate, deleteAction }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {cardCount} {cardCount > 1 ? \"cards\" : \"card\"}\r\n                </Typography>\r\n                <Typography align=\"right\" className={classes.modifiedDate}>\r\n                    <AccessTimeIcon className={classes.icon} />\r\n                    {moment(modifiedDate).format(\"DD/MM/YYYY\")}\r\n                </Typography>\r\n                <IconButton align=\"right\" aria-label=\"delete\" onClick={() => deleteAction()}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default BoardCard;","import axios from 'axios';\r\n\r\nasync function getBoards(userID) {\r\n    try {\r\n        const res = await axios.get(`https://sprint-retrospective-api.herokuapp.com/boards/${userID}`);\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nasync function deleteBoard(boardID) {\r\n    try {\r\n        await axios.delete(`https://sprint-retrospective-api.herokuapp.com/boards/${boardID}`);\r\n        return true;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nconst funcs = { getBoards, deleteBoard };\r\n\r\n\r\nexport default funcs;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport BoardCard from './BoardCard';\r\n\r\nimport BoardService from './services/BoardService';\r\n\r\n\r\nconst PublicBoards = ({ boardList, refreshBoards }) => {\r\n    const boards = Array.from(boardList);\r\n    const listView = [];\r\n    if (boards.length !== 0) {\r\n        for (let i = 0; i < boards.length; i++) {\r\n            listView.push(\r\n                <Grid item\r\n                    key={i}\r\n                    sx={4}>\r\n                    <BoardCard\r\n                        name={boards[i].name}\r\n                        modifiedDate={boards[i].modifiedDate}\r\n                        cardCount={boards[i].cardCount}\r\n                        deleteAction={() => {\r\n                            BoardService.deleteBoard(boards[i]._id);\r\n                            refreshBoards();\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n    return (<Grid container spacing={3} >{listView}</Grid>);\r\n};\r\n\r\n\r\nexport default PublicBoards;","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\n\r\n\r\n\r\nexport default function AddBoard() {\r\n    return (\r\n        <Box borderRadius={16}>\r\n            <Button size=\"large\" variant=\"outlined\" color=\"primary\">\r\n\r\n            </Button>\r\n        </Box>\r\n    );\r\n};","import Cookies from 'universal-cookie';\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\n\r\nfunction write(key, value) {\r\n    return cookies.set(key, value);\r\n};\r\n\r\n\r\nfunction read(key) {\r\n    return cookies.get(key);\r\n};\r\n\r\n\r\nfunction clear(key) {\r\n    return cookies.remove(key);\r\n};\r\n\r\nconst func = { write, read, clear };\r\n\r\nexport default func;","import axios from 'axios';\r\n\r\nasync function getUser(userID) {\r\n    try {\r\n        const res = await axios.get(`https://sprint-retrospective-api.herokuapp.com/users/${userID}`);\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nasync function register(email, password, firstName, lastName) {\r\n    try {\r\n        const res = await axios.post(`https://sprint-retrospective-api.herokuapp.com/users/register`, { email, password, firstName, lastName });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nasync function login(email, password) {\r\n    try {\r\n        const res = await axios.post(`https://sprint-retrospective-api.herokuapp.com/users/`, { email, password });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nasync function update(firstName, lastName) {\r\n    try {\r\n        const res = await axios.put(`https://sprint-retrospective-api.herokuapp.com/users/update`, { firstName, lastName });\r\n        if (res.status === 200) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nconst funcs = { login, register, getUser, update };\r\n\r\n\r\nexport default funcs;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Grid, Typography, FormControl, InputLabel, Input, Box, Button, Link } from '@material-ui/core';\r\n\r\n\r\nimport CookieService from './services/CookieService';\r\nimport AccountService from './services/AccountService';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        padding: 50,\r\n    },\r\n    title: {\r\n        color: '#283593',\r\n        fontWeight: \"bold\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Login({ loginSuccessAction }) {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [haveAnAccount, setHaveAnAccount] = useState(false);\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const login = async (event) => {\r\n        event.preventDefault();\r\n        const userID = await AccountService.login(email, password);\r\n        CookieService.write('userID', userID);\r\n        loginSuccessAction();\r\n    }\r\n\r\n    const register = async (event) => {\r\n        event.preventDefault();\r\n        const userID = await AccountService.register(email, password, firstName, lastName);\r\n        CookieService.write('userID', userID);\r\n        loginSuccessAction();\r\n    }\r\n\r\n\r\n    if (!haveAnAccount) {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item>\r\n                        <Typography className={classes.title} variant=\"h4\" >\r\n                            Register\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <form onSubmit={(e) => register(e)}>\r\n                            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350}>\r\n                                            <InputLabel htmlFor=\"input-email\">Email</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-email\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                value={email}\r\n                                                onInput={e => setEmail(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350}>\r\n                                            <InputLabel htmlFor=\"input-first-name\">First Name</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-first-name\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                value={firstName}\r\n                                                onInput={e => setFirstName(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350}>\r\n                                            <InputLabel htmlFor=\"input-last-name\">Last Name</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-last-name\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                value={lastName}\r\n                                                onInput={e => setLastName(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350} >\r\n                                            <InputLabel htmlFor=\"input-password\">Password</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-password\"\r\n                                                type=\"password\"\r\n                                                fullWidth\r\n                                                value={password}\r\n                                                onInput={e => setPassword(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type=\"submit\">Submit</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            Already have an account? <Link onClick={() => setHaveAnAccount(true)}>Login</Link>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item>\r\n                        <Typography className={classes.title} variant=\"h4\" >\r\n                            Login\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <form onSubmit={(e) => login(e)}>\r\n                            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350}>\r\n                                            <InputLabel htmlFor=\"input-email\">Email</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-email\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                value={email}\r\n                                                onInput={e => setEmail(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormControl>\r\n                                        <Box width={350} >\r\n                                            <InputLabel htmlFor=\"input-password\">Password</InputLabel>\r\n                                            <Input\r\n                                                id=\"input-password\"\r\n                                                type=\"password\"\r\n                                                fullWidth\r\n                                                value={password}\r\n                                                onInput={e => setPassword(String(e.target.value))}\r\n                                            />\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type=\"submit\">Submit</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            Don't have an account? <Link onClick={() => setHaveAnAccount(false)}>Register</Link>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Typography, Box, makeStyles } from '@material-ui/core';\r\nimport Header from './Header';\r\nimport PublicBoards from './PublicBoards';\r\nimport AddBoard from './AddBoard';\r\nimport Login from './Login';\r\n\r\nimport CookieService from './services/CookieService';\r\nimport AccountService from './services/AccountService';\r\nimport BoardService from './services/BoardService';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    titleStyles: {\r\n        marginBlockStart: 25,\r\n        color: '#283593',\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\n\r\nexport default function App() {\r\n    const [boards, setBoards] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const classes = useStyles();\r\n\r\n    const FetchData = async () => {\r\n        if (!user) {\r\n            const userID = CookieService.read('userID');\r\n            if (userID) {\r\n                AccountService.getUser(userID).then(userData => {\r\n                    if (userData) {\r\n                        setUser(userData);\r\n                    }\r\n                });\r\n                const boards = await BoardService.getBoards(userID);\r\n                if (boards) {\r\n                    setBoards(boards);\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => { FetchData(); });\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Header userName={user.firstName} avatar={user.avatar} updateUserProfileAction={() => { }} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box m={3}>\r\n                        <Typography display=\"block\" variant=\"h5\" className={classes.titleStyles}>\r\n                            My boards\r\n                    </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box ml={3}>\r\n                        <Typography display=\"block\" variant=\"h6\" className={classes.titleStyles}>\r\n                            Public boards\r\n                    </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item container>\r\n                    <Grid item xs={1} />\r\n                    <Grid item>\r\n                        {isLoading ?\r\n                            <Typography>Loading...</Typography> :\r\n                            < PublicBoards\r\n                                boardList={boards}\r\n                                refreshBoards={async () => { setBoards(await BoardService.getBoards(user._id)) }}\r\n                            />\r\n                        }\r\n                    </Grid>\r\n                    <AddBoard />\r\n                    <Grid item xs={1} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    } else {\r\n        return (\r\n            <Login loginSuccessAction={() => FetchData()} />\r\n        )\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}