{"version":3,"sources":["Header.js","BoardCard.js","PublicBoards.js","AddBoard.js","services/CookieService.js","Login.js","App.js","index.js"],"names":["useStyles","makeStyles","appbarstyle","backgroundColor","typographyStyle","flex","Header","userName","avatar","classes","AppBar","position","className","Toolbar","Typography","variant","Avatar","src","Button","root","minWidth","title","color","pos","marginBottom","modifiedDate","fontSize","icon","fontWeight","BoardCard","name","cardCount","Card","CardContent","align","moment","format","PublicBoards","boardList","boards","Array","from","listView","length","i","push","Grid","item","sx","container","spacing","AddBoard","Box","borderRadius","size","cookies","Cookies","func","write","key","value","set","read","get","clear","remove","theme","flexGrow","padding","Login","loginSuccessAction","useState","email","setEmail","password","setPassword","handleSubmit","event","a","preventDefault","axios","post","res","status","CookieService","data","console","log","direction","justify","alignItems","onSubmit","e","FormControl","width","InputLabel","htmlFor","Input","id","type","fullWidth","onInput","String","target","titleStyles","marginBlockStart","App","setBoards","user","setUser","isLoading","setIsLoading","fetchData","userID","respone","useEffect","uID","m","display","ml","xs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60e57871.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Avatar, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    appbarstyle: { backgroundColor: '#2196F3' },\r\n    typographyStyle: { flex: 1 }\r\n}));\r\n\r\n\r\nconst Header = ({ userName, avatar }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"static\" className={classes.appbarstyle}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\" className={classes.typographyStyle}>Sprint Retrospective</Typography>\r\n                <Avatar src={avatar} />\r\n                <Button>\r\n                    Hi {userName}\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Card, CardContent, Typography, makeStyles } from '@material-ui/core';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 200,\r\n    },\r\n    title: {\r\n        color: '#8E24AA'\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    modifiedDate: {\r\n        fontSize: 15\r\n    },\r\n    icon: {\r\n        fontSize: 15,\r\n        color: '#283593',\r\n        fontWeight: 'bolder'\r\n    }\r\n});\r\n\r\n\r\nconst BoardCard = ({ name, cardCount, modifiedDate }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {cardCount} {cardCount > 1 ? \"cards\" : \"card\"}\r\n                </Typography>\r\n                <Typography align=\"right\" className={classes.modifiedDate}>\r\n                    <AccessTimeIcon className={classes.icon} />\r\n                    {moment(modifiedDate).format(\"DD/MM/YYYY\")}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default BoardCard;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport BoardCard from './BoardCard';\r\n\r\n\r\nconst PublicBoards = ({ boardList }) => {\r\n    const boards = Array.from(boardList);\r\n    const listView = [];\r\n    if (boards.length !== 0) {\r\n        for (let i = 0; i < boards.length; i++) {\r\n            listView.push(\r\n                <Grid item\r\n                    key={i}\r\n                    sx={4}>\r\n                    <BoardCard\r\n                        name={boards[i].name}\r\n                        modifiedDate={boards[i].modifiedDate}\r\n                        cardCount={boards[i].cardCount} />\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n    return (<Grid container spacing={3} >{listView}</Grid>);\r\n};\r\n\r\n\r\nexport default PublicBoards;","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\n\r\n\r\n\r\nexport default function AddBoard() {\r\n    return (\r\n        <Box borderRadius={16}>\r\n            <Button size=\"large\" variant=\"outlined\" color=\"primary\">\r\n\r\n            </Button>\r\n        </Box>\r\n    );\r\n};","import Cookies from 'universal-cookie';\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\n\r\nfunction write(key, value) {\r\n    return cookies.set(key, value);\r\n};\r\n\r\n\r\nfunction read(key) {\r\n    return cookies.get(key);\r\n};\r\n\r\n\r\nfunction clear(key) {\r\n    return cookies.remove(key);\r\n};\r\n\r\nconst func = { write, read, clear };\r\n\r\nexport default func;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Grid, Typography, FormControl, InputLabel, Input, Box, Button } from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nimport CookieService from './services/CookieService';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        padding: 50,\r\n    },\r\n    title: {\r\n        color: '#283593',\r\n        fontWeight: \"bold\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Login({ loginSuccessAction }) {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const res = await axios.post(`http://localhost:5000/users/`, { email, password });\r\n            if (res.status === 200) {\r\n                CookieService.write('userID', res.data);\r\n                loginSuccessAction();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                <Grid item>\r\n                    <Typography className={classes.title} variant=\"h4\" >\r\n                        Login\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <form onSubmit={(e) => handleSubmit(e)}>\r\n                        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                            <Grid item>\r\n                                <FormControl>\r\n                                    <Box width={350}>\r\n                                        <InputLabel htmlFor=\"input-email\">Email</InputLabel>\r\n                                        <Input\r\n                                            id=\"input-email\"\r\n                                            type=\"text\"\r\n                                            fullWidth\r\n                                            value={email}\r\n                                            onInput={e => setEmail(String(e.target.value))}\r\n                                        />\r\n                                    </Box>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <FormControl>\r\n                                    <Box width={350} >\r\n                                        <InputLabel htmlFor=\"input-password\">Password</InputLabel>\r\n                                        <Input\r\n                                            id=\"input-password\"\r\n                                            type=\"password\"\r\n                                            fullWidth\r\n                                            value={password}\r\n                                            onInput={e => setPassword(String(e.target.value))}\r\n                                        />\r\n                                    </Box>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button type=\"submit\">Submit</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Typography, Box, makeStyles } from '@material-ui/core';\r\nimport Header from './Header';\r\nimport PublicBoards from './PublicBoards';\r\nimport AddBoard from './AddBoard';\r\nimport Login from './Login';\r\nimport CookieService from './services/CookieService';\r\nimport axios from 'axios';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    titleStyles: {\r\n        marginBlockStart: 25,\r\n        color: '#283593',\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\n\r\nexport default function App() {\r\n    const [boards, setBoards] = useState([]);\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const classes = useStyles();\r\n\r\n\r\n    const fetchData = async (userID) => {\r\n        try {\r\n            const respone = await axios.get(`https://sprint-retrospective-api.herokuapp.com/boards/${userID}`);\r\n            setBoards(respone.data);\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => { fetchData(user) }, [user]);\r\n\r\n\r\n    if (!user) {\r\n        const uID = CookieService.read('userID');\r\n        if (uID)\r\n            setUser(String(uID));\r\n    }\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Header userName=\"Đức\" avatar=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box m={3}>\r\n                        <Typography display=\"block\" variant=\"h5\" className={classes.titleStyles}>\r\n                            My boards\r\n                    </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box ml={3}>\r\n                        <Typography display=\"block\" variant=\"h6\" className={classes.titleStyles}>\r\n                            Public boards\r\n                    </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item container>\r\n                    <Grid item xs={1} />\r\n                    <Grid item>\r\n                        {isLoading ?\r\n                            <Typography>Loading...</Typography> :\r\n                            < PublicBoards boardList={boards} />\r\n                        }\r\n                    </Grid>\r\n                    <AddBoard />\r\n                    <Grid item xs={1} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    } else {\r\n        return (\r\n            <Login\r\n                loginSuccessAction={() => {\r\n                    const userID = CookieService.read(`userID`);\r\n                    setUser(String(userID));\r\n                }}\r\n            />\r\n        )\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}